<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.gdkm</groupId>
		<artifactId>weixin</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>library</artifactId>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>commons</artifactId>
			<version>${project.version}</version>
		</dependency><!-- Jackson原本是用于Java和JSON相互转换的，后来为了实现Java和XML的转换，增加了jackson-dataformat-xml --><!-- 如果要使用Jackson，那么就用这个转换器即可！ -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency><!-- 自动配置Spring Data JPA，使用Hibernate实现 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency><!-- 自动配置Redis，使用Lettuce驱动 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency><!-- 自动配置Spring MVC -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency><!-- 数据库驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency><!-- Spring Boot的测试支持 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency><!-- 单元测试框架 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId><!-- <version>4.12</version> -->
			<scope>test</scope>
		</dependency><!-- 开发者工具，用于实现热部署（修改文件以后马上生效） -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId><!-- scope必须是runtime才能生效 -->
			<scope>runtime</scope>
		</dependency>



		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<!-- 如果在Tomcat里面运行，那么是由Tomcat提供的 -->
			<!-- 如果在mvn命令直接运行，该依赖也会加入类路径 -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

	</dependencies>
	<build>
		<plugins><!-- Spring Boot提供的打包插件，能够在把项目打包的时候，自动把依赖的jar文件一并打包 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration><!-- 可以打包成一个可执行jar -->
					<executable>true</executable><!-- 创建一个子进程去执行，此时可以使用mvn spring-boot:start启动 --><!-- 也可以使用mvn spring-boot:stop停止 -->
					<fork>true</fork><!-- 注意：这种启动和停止，都需要借助一个JMX端口，每个模块的JMX端口号必须不同 --><!-- 默认端口号是9001，建议每100个端口作为一段端口号分配一个人使用 --><!-- 这里选择使用10001 --><!-- 端口号必须大于1024，并且小于或等于65535 -->
					<jmxPort>10004</jmxPort>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>